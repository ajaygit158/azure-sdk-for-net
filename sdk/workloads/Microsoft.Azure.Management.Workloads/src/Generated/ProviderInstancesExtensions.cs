// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Workloads
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ProviderInstances.
    /// </summary>
    public static partial class ProviderInstancesExtensions
    {
            /// <summary>
            /// Gets a list of provider instances in the specified SAP monitor.
            /// </summary>
            /// <remarks>
            /// Gets a list of provider instances in the specified SAP monitor. The
            /// operations returns various properties of each provider instances.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            public static ProviderInstanceListResult List(this IProviderInstances operations, string resourceGroupName, string monitorName)
            {
                return operations.ListAsync(resourceGroupName, monitorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of provider instances in the specified SAP monitor.
            /// </summary>
            /// <remarks>
            /// Gets a list of provider instances in the specified SAP monitor. The
            /// operations returns various properties of each provider instances.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderInstanceListResult> ListAsync(this IProviderInstances operations, string resourceGroupName, string monitorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, monitorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets properties of a provider instance.
            /// </summary>
            /// <remarks>
            /// Gets properties of a provider instance for the specified subscription,
            /// resource group, Monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            public static ProviderInstance Get(this IProviderInstances operations, string resourceGroupName, string monitorName, string providerInstanceName)
            {
                return operations.GetAsync(resourceGroupName, monitorName, providerInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets properties of a provider instance.
            /// </summary>
            /// <remarks>
            /// Gets properties of a provider instance for the specified subscription,
            /// resource group, Monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderInstance> GetAsync(this IProviderInstances operations, string resourceGroupName, string monitorName, string providerInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, monitorName, providerInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a provider instance.
            /// </summary>
            /// <remarks>
            /// Creates a provider instance for the specified subscription, resource group,
            /// Monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            /// <param name='providerInstanceParameter'>
            /// Request body representing a provider instance
            /// </param>
            public static ProviderInstance Create(this IProviderInstances operations, string resourceGroupName, string monitorName, string providerInstanceName, ProviderInstance providerInstanceParameter)
            {
                return operations.CreateAsync(resourceGroupName, monitorName, providerInstanceName, providerInstanceParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a provider instance.
            /// </summary>
            /// <remarks>
            /// Creates a provider instance for the specified subscription, resource group,
            /// Monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            /// <param name='providerInstanceParameter'>
            /// Request body representing a provider instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderInstance> CreateAsync(this IProviderInstances operations, string resourceGroupName, string monitorName, string providerInstanceName, ProviderInstance providerInstanceParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, monitorName, providerInstanceName, providerInstanceParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a provider instance.
            /// </summary>
            /// <remarks>
            /// Deletes a provider instance for the specified subscription, resource group,
            /// Monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            public static OperationStatusResult Delete(this IProviderInstances operations, string resourceGroupName, string monitorName, string providerInstanceName)
            {
                return operations.DeleteAsync(resourceGroupName, monitorName, providerInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a provider instance.
            /// </summary>
            /// <remarks>
            /// Deletes a provider instance for the specified subscription, resource group,
            /// Monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatusResult> DeleteAsync(this IProviderInstances operations, string resourceGroupName, string monitorName, string providerInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, monitorName, providerInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
