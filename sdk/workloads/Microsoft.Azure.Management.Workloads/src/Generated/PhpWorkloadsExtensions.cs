// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Workloads
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PhpWorkloads.
    /// </summary>
    public static partial class PhpWorkloadsExtensions
    {
            /// <summary>
            /// Lists phpWorkload resources in a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PhpWorkloadResourceList ListBySubscription(this IPhpWorkloads operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists phpWorkload resources in a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhpWorkloadResourceList> ListBySubscriptionAsync(this IPhpWorkloads operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists phpWorkload resources in a resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static PhpWorkloadResourceList ListByResourceGroup(this IPhpWorkloads operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists phpWorkload resources in a resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhpWorkloadResourceList> ListByResourceGroupAsync(this IPhpWorkloads operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a phpWorkload resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name.
            /// </param>
            public static PhpWorkloadResource Get(this IPhpWorkloads operations, string resourceGroupName, string phpWorkloadName)
            {
                return operations.GetAsync(resourceGroupName, phpWorkloadName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a phpWorkload resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhpWorkloadResource> GetAsync(this IPhpWorkloads operations, string resourceGroupName, string phpWorkloadName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, phpWorkloadName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or updated phpWorkloads resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name.
            /// </param>
            /// <param name='phpWorkloadResource'>
            /// Resource create or update request payload
            /// </param>
            public static PhpWorkloadResource CreateOrUpdate(this IPhpWorkloads operations, string resourceGroupName, string phpWorkloadName, PhpWorkloadResource phpWorkloadResource)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, phpWorkloadName, phpWorkloadResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or updated phpWorkloads resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name.
            /// </param>
            /// <param name='phpWorkloadResource'>
            /// Resource create or update request payload
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhpWorkloadResource> CreateOrUpdateAsync(this IPhpWorkloads operations, string resourceGroupName, string phpWorkloadName, PhpWorkloadResource phpWorkloadResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, phpWorkloadName, phpWorkloadResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update PHP workload resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name.
            /// </param>
            /// <param name='resourcePatchRequestBody'>
            /// Workload resource update data
            /// </param>
            public static PhpWorkloadResource Update(this IPhpWorkloads operations, string resourceGroupName, string phpWorkloadName, PatchResourceRequestBody resourcePatchRequestBody)
            {
                return operations.UpdateAsync(resourceGroupName, phpWorkloadName, resourcePatchRequestBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update PHP workload resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name.
            /// </param>
            /// <param name='resourcePatchRequestBody'>
            /// Workload resource update data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhpWorkloadResource> UpdateAsync(this IPhpWorkloads operations, string resourceGroupName, string phpWorkloadName, PatchResourceRequestBody resourcePatchRequestBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, phpWorkloadName, resourcePatchRequestBody, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete phpWorkloads resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name.
            /// </param>
            /// <param name='deleteInfra'>
            /// Whether to delete infra along with workload resource.
            /// </param>
            public static void Delete(this IPhpWorkloads operations, string resourceGroupName, string phpWorkloadName, string deleteInfra = default(string))
            {
                operations.DeleteAsync(resourceGroupName, phpWorkloadName, deleteInfra).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete phpWorkloads resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name.
            /// </param>
            /// <param name='deleteInfra'>
            /// Whether to delete infra along with workload resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPhpWorkloads operations, string resourceGroupName, string phpWorkloadName, string deleteInfra = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, phpWorkloadName, deleteInfra, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
