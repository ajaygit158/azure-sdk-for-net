// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Workloads
{
    using Models;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Monitors.
    /// </summary>
    public static partial class MonitorsExtensions
    {
            /// <summary>
            /// Gets a list of SAP monitors in the specified subscription.
            /// </summary>
            /// <remarks>
            /// Gets a list of SAP monitors in the specified subscription. The operations
            /// returns various properties of each SAP monitor.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MonitorListResult List(this IMonitors operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of SAP monitors in the specified subscription.
            /// </summary>
            /// <remarks>
            /// Gets a list of SAP monitors in the specified subscription. The operations
            /// returns various properties of each SAP monitor.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MonitorListResult> ListAsync(this IMonitors operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of SAP monitors
            /// </summary>
            /// <remarks>
            /// Gets a list of SAP monitors in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static MonitorListResult ListByResourceGroup(this IMonitors operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of SAP monitors
            /// </summary>
            /// <remarks>
            /// Gets a list of SAP monitors in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MonitorListResult> ListByResourceGroupAsync(this IMonitors operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets properties of a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Gets properties of a SAP monitor for the specified subscription, resource
            /// group, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            public static Monitor Get(this IMonitors operations, string resourceGroupName, string monitorName)
            {
                return operations.GetAsync(resourceGroupName, monitorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets properties of a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Gets properties of a SAP monitor for the specified subscription, resource
            /// group, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Monitor> GetAsync(this IMonitors operations, string resourceGroupName, string monitorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, monitorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Creates a SAP monitor for the specified subscription, resource group, and
            /// resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='monitorParameter'>
            /// Request body representing a SAP Monitor
            /// </param>
            public static Monitor Create(this IMonitors operations, string resourceGroupName, string monitorName, Monitor monitorParameter)
            {
                return operations.CreateAsync(resourceGroupName, monitorName, monitorParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Creates a SAP monitor for the specified subscription, resource group, and
            /// resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='monitorParameter'>
            /// Request body representing a SAP Monitor
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Monitor> CreateAsync(this IMonitors operations, string resourceGroupName, string monitorName, Monitor monitorParameter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, monitorName, monitorParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Deletes a SAP monitor with the specified subscription, resource group, and
            /// monitor name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            public static OperationStatusResult Delete(this IMonitors operations, string resourceGroupName, string monitorName)
            {
                return operations.DeleteAsync(resourceGroupName, monitorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Deletes a SAP monitor with the specified subscription, resource group, and
            /// monitor name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatusResult> DeleteAsync(this IMonitors operations, string resourceGroupName, string monitorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, monitorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patches the Tags field of a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Patches the Tags field of a SAP monitor for the specified subscription,
            /// resource group, and monitor name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='tagsParameter'>
            /// Request body that only contains the new Tags field
            /// </param>
            public static Monitor Update(this IMonitors operations, string resourceGroupName, string monitorName, Tags tagsParameter)
            {
                return operations.UpdateAsync(resourceGroupName, monitorName, tagsParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patches the Tags field of a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Patches the Tags field of a SAP monitor for the specified subscription,
            /// resource group, and monitor name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='tagsParameter'>
            /// Request body that only contains the new Tags field
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Monitor> UpdateAsync(this IMonitors operations, string resourceGroupName, string monitorName, Tags tagsParameter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, monitorName, tagsParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
