// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Workloads
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    public partial interface IWorkloadsClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// The API version to use for this operation.
        /// </summary>
        string ApiVersion { get; set; }

        /// <summary>
        /// The ID of the target subscription.
        /// </summary>
        string SubscriptionId { get; set; }


        /// <summary>
        /// Gets the ISAPVirtualInstances.
        /// </summary>
        ISAPVirtualInstances SAPVirtualInstances { get; }

        /// <summary>
        /// Gets the ISAPCentralInstances.
        /// </summary>
        ISAPCentralInstances SAPCentralInstances { get; }

        /// <summary>
        /// Gets the ISAPDatabaseInstances.
        /// </summary>
        ISAPDatabaseInstances SAPDatabaseInstances { get; }

        /// <summary>
        /// Gets the ISAPApplicationServerInstances.
        /// </summary>
        ISAPApplicationServerInstances SAPApplicationServerInstances { get; }

        /// <summary>
        /// Gets the IPhpWorkloads.
        /// </summary>
        IPhpWorkloads PhpWorkloads { get; }

        /// <summary>
        /// Gets the IWordpressInstances.
        /// </summary>
        IWordpressInstances WordpressInstances { get; }

        /// <summary>
        /// Gets the IMonitors.
        /// </summary>
        IMonitors Monitors { get; }

        /// <summary>
        /// Gets the IProviderInstances.
        /// </summary>
        IProviderInstances ProviderInstances { get; }

        /// <summary>
        /// Gets the IOperations.
        /// </summary>
        IOperations Operations { get; }

        /// <summary>
        /// Get SAP sizing recommendations.
        /// </summary>
        /// <param name='location'>
        /// The name of Azure region.
        /// </param>
        /// <param name='sAPSizingRecommendation'>
        /// SAP Sizing Recommendation Request body
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SAPSizingRecommendationResult>> SAPSizingRecommendationsWithHttpMessagesAsync(string location, SAPSizingRecommendationRequest sAPSizingRecommendation = default(SAPSizingRecommendationRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get SAP supported SKUs.
        /// </summary>
        /// <param name='location'>
        /// The name of Azure region.
        /// </param>
        /// <param name='sAPSupportedSku'>
        /// SAP Supported SKU Request body
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SAPSupportedResourceSkusResult>> SAPSupportedSkuMethodWithHttpMessagesAsync(string location, SAPSupportedSkusRequest sAPSupportedSku = default(SAPSupportedSkusRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
